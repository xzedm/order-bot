// api/src/notifications/manager-notification.service.ts
import { Injectable } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { PrismaService } from '../prisma/prisma.service';

export interface OrderNotificationData {
  customerName?: string;
  customerPhone?: string;
  items: Array<{
    name: string;
    sku: string;
    qty: number;
    price: number;
    amount: number;
  }>;
  totalAmount: number;
  currency: string;
  customerMessage: string;
  orderNumber: string;
  orderId: string;
}

@Injectable()
export class ManagerNotificationService {
  private readonly managerChannelId: string;

  constructor(
    @InjectBot() private bot: Telegraf,
    private prisma: PrismaService,
  ) {
    this.managerChannelId = process.env.TELEGRAM_MANAGER_CHANNEL_ID!;
    if (!this.managerChannelId) {
      console.warn('‚ö†Ô∏è TELEGRAM_MANAGER_CHANNEL_ID not set - manager notifications disabled');
    }
  }

  async notifyNewOrder(orderData: OrderNotificationData): Promise<void> {
    if (!this.managerChannelId) {
      console.warn('Manager channel not configured, skipping notification');
      return;
    }

    try {
      const message = this.formatOrderMessage(orderData);
      const keyboard = this.createOrderKeyboard(orderData.orderId);

      await this.bot.telegram.sendMessage(
        this.managerChannelId,
        message,
        {
          parse_mode: 'HTML',
          reply_markup: keyboard
        }
      );

      console.log(`‚úÖ Order notification sent to managers: ${orderData.orderNumber}`);
    } catch (error) {
      console.error('‚ùå Failed to send manager notification:', error);
    }
  }

  private formatOrderMessage(data: OrderNotificationData): string {
    const itemsList = data.items
      .map(item => `‚Ä¢ <b>${item.name}</b> x${item.qty} ‚Äî ${item.amount}‚Ç∏`)
      .join('\n');

    return `
üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>
üìù –ù–æ–º–µ—Ä: <code>${data.orderNumber}</code>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
${data.customerName ? `–ò–º—è: ${data.customerName}` : ''}
${data.customerPhone ? `üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>${data.customerPhone}</code>` : '‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}

üõí <b>–¢–æ–≤–∞—Ä—ã:</b>
${itemsList}

üí∞ <b>–°—É–º–º–∞:</b> ${data.totalAmount} ${data.currency}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>
"${data.customerMessage}"

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}
    `.trim();
  }

  private createOrderKeyboard(orderId: string) {
    return {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_order:${orderId}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_order:${orderId}` }
        ],
        [
          { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è', callback_data: `contact_customer:${orderId}` },
          { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `edit_order:${orderId}` }
        ]
      ]
    };
  }

  // Handle manager button clicks
  async handleManagerAction(callbackQuery: any): Promise<void> {
    const data = callbackQuery.data;
    const [action, orderId] = data.split(':');

    try {
      switch (action) {
        case 'confirm_order':
          await this.confirmOrder(orderId, callbackQuery.from.id);
          break;
        case 'reject_order':
          await this.rejectOrder(orderId, callbackQuery.from.id);
          break;
        case 'contact_customer':
          await this.handleContactCustomer(orderId, callbackQuery);
          break;
        case 'edit_order':
          await this.handleEditOrder(orderId, callbackQuery);
          break;
      }
    } catch (error) {
      console.error(`‚ùå Error handling manager action ${action}:`, error);
      await this.bot.telegram.answerCbQuery(
        callbackQuery.id,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    }
  }

  private async confirmOrder(orderId: string, managerId: number): Promise<void> {
    // Update order status to CONFIRMED
    const order = await this.prisma.order.update({
      where: { id: orderId },
      data: { 
        status: 'CONFIRMED',
        // TODO: Add managerId field to Order model
      },
      include: { 
        customer: true,
        items: { include: { product: true } }
      }
    });

    // Send confirmation to customer via bot
    if (order.customer.tgUserId) {
      const message = `
‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>

üìù –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>${order.number}</code>
üí∞ –°—É–º–º–∞: ${order.totalAmount} ${order.currency}

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã.

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üôè
      `.trim();

      try {
        await this.bot.telegram.sendMessage(
          order.customer.tgUserId,
          message,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('Failed to send confirmation to customer:', error);
      }
    }

    console.log(`‚úÖ Order ${order.number} confirmed by manager ${managerId}`);
  }

  private async rejectOrder(orderId: string, managerId: number): Promise<void> {
    const order = await this.prisma.order.update({
      where: { id: orderId },
      data: { status: 'CANCELLED' },
      include: { customer: true }
    });

    // Send rejection notice to customer
    if (order.customer.tgUserId) {
      const message = `
‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>

üìù –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>${order.number}</code>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. 
–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.
      `.trim();

      try {
        await this.bot.telegram.sendMessage(
          order.customer.tgUserId,
          message,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('Failed to send rejection notice to customer:', error);
      }
    }

    console.log(`‚ùå Order ${order.number} rejected by manager ${managerId}`);
  }

  private async handleContactCustomer(orderId: string, callbackQuery: any): Promise<void> {
    const order = await this.prisma.order.findUnique({
      where: { id: orderId },
      include: { customer: true }
    });

    if (!order) {
      await this.bot.telegram.answerCbQuery(
        callbackQuery.id,
        '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      );
      return;
    }

    const contactInfo = `
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞</b>

üìù –ó–∞–∫–∞–∑: <code>${order.number}</code>
${order.customer.name ? `üë§ –ò–º—è: ${order.customer.name}` : ''}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>${order.customer.phone}</code>
${order.customer.email ? `üìß Email: ${order.customer.email}` : ''}

–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.
    `.trim();

    await this.bot.telegram.sendMessage(
      callbackQuery.from.id,
      contactInfo,
      { parse_mode: 'HTML' }
    );

    await this.bot.telegram.answerCbQuery(
      callbackQuery.id,
      '–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
    );
  }

  private async handleEditOrder(orderId: string, callbackQuery: any): Promise<void> {
    // For now, just provide a message with instructions
    // In a full implementation, you might create an inline form or redirect to admin panel
    await this.bot.telegram.answerCbQuery(
      callbackQuery.id,
      '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é',
    //   true
    );
  }
}